aDf
aDf[3:4, c(1, 3)]
aDf[3:4, c(1, 3)]
# [[]]
aDf[[1]]
aDf$a[2:3]
rev(1:5)
aDf <- data.frame(a = rep(1.5, times = 6),
b = c("a", "b", "c", "d", "e", "f"),
c = LETTERS[1:6],
d = c(TRUE, FALSE, TRUE, FALSE, T, F),
e = rev(11:16))
# $
aDf$e
aDf$e[2:3]
aDf[1][2]
aDf[["a"]]
aDf[["a"]]
# [[]]
aDf[[1]]
aDf["a"]
aDf["a"]
aDf["a"][2]
aDf[[1]][[3]]
aDf[[3]][[3]]
aDf[[3]][3]
sessionInfo()
1+1
a = c(123, 232)
a
a = c(12,34)
a +1
a = c(1L, 2L, 3L) #integer
a
typeof
typeof(a)
d = c(3.3, 3.14) # double
d
typeof(d) # vvvv
mode(a)
mode(d) # xxxx
b = c("ha", "you", "hello") #charcter
b
typeof(b)
b
typeof(b)
1:8
c(1, 2, 3, 4, 5,6,7,8)
aMatrix <- matrix(1:8, ncol = 2)
aMatrix
aArray <- array(1:8, dim = c(2,2,2))
aArray
aMatrix <- matrix(1:8, ncol = 2)
aMatrix
e = c(TRUE, FALSE, T, F)
e
typeof(e)
aMatrix <- matrix(1:8, ncol = 2, byrow = TRUE)
aMatrix
a
a[2]
a[3]
a[c(1, 3)]
d
d <- c(23, 2.5, 3.8, 9)
d
typeof(d)
d[2]
d[3]
d[c(1, 3)]
aMatrix
aMatrix[1, 1]
aMatrix[1, ]
aMatrix[, 2]
aMatrix
aMatrix[c(2,3), c(1,2)]
aMatrix[6]
aMatrix
sum(d)
sd(d)
sum(d)
sd(d)
max(d)
min(d)
summary(d)
l = list(3, 3.4, "a", TRUE)
l
d
typeof(l)
pi
aList = list(a = 1:3, # a = c(1,2,3)
b = TRUE,
c = list(d = "happy",
e = c(1.3, 4.5, 7.83, pi)))
aList
l
aList = list(a = 1:3, # a = c(1,2,3)
b = TRUE,
c = list(d = "happy",
e = c(1.3, 4.5, 7.83, pi)))
aList
typeof(aList)
class(aList)
aList
aList$a
aList$a
aList
aList[1]
aList$a
aList[1]
aList["a"]
aList[[1]]
aList[["a"]]
d
d = 1:25
d
d
letters
letters[20]
d = 1:25
d
letters[20]
d
aList
aList[1]
typeof(aList[1])
aList$a
aList[[1]]
typeof(aList[[1]])
rep(1.5, times = 6)
LETTERS
letters
rev(11:16)
aDf <- data.frame(a = rep(1.5, times = 6),
b = c("a", "b", "c", "d", "e", "f"),
c = LETTERS[1:6],
d = c(TRUE, FALSE, TRUE, FALSE, T, F),
e = rev(11:16))
aDf
typeof(aDf)
typeof(aList)
typeof(aDf)
class(aDf)
class(aList)
# []
aDf[1]
aDf["a"]
# [,]
aDf[1, 3]
aDf[c(1, 3), 3:4]
# [[]]
aDf[[3]]
aDf[["c"]]
aDf[[3]][3]
# $
aDf$e
aDf$e[2:3]
sum(d)
d
help(sum)
d
print(d)
print(d, quote = TRUE)
print(d, quote = 3)
knitr::opts_chunk$set(echo = TRUE, collapse = TRUE)
citation(package ="CCTpack")
a = 1:3
a[1]
a[[1]]
a[[c(2,3)]]
a = c(a = 1, b = 2, c = 3)
a
a["a"]
a[["a"]]
a$a
a$b
matrix(1:24, dim = c(2,3,4))
array(1:24, dim = c(2,3,4))
mtcars[,1]
mtcars[,c(1,2)]
mtcars[1,]
mtcars[1,] %>% class()
class(mtcars[1,])
class(mtcars[,1])
a = list(b = c("d", "e"), g = 1:2)
a[1, drop = TREU]
a[1, drop = TRUE]
knitr::opts_chunk$set(echo = TRUE)
sessionInfo()
sessionInfo()
a = c(1L, 2L, 3L) #integer
a
typeof(a)
mode(a)
d = c(3.3, 3.14) # double
d
typeof(d) # vvvv
mode(d) # xxxx
b = c("ha", "you", "hello") #charcter
b
typeof(b)
e = c(TRUE, FALSE, T, F)
e
typeof(e)
1:8
c(1, 2, 3, 4, 5,6,7,8)
aMatrix <- matrix(1:8, ncol = 2, byrow = TRUE)
aMatrix
aArray <- array(1:8, dim = c(2,2,2))
aArray
d <- c(23, 2.5, 3.8, 9)
d
typeof(d)
sum(d)
sd(d)
max(d)
min(d)
summary(d)
d[2]
d[3]
d[c(1, 3)]
aMatrix[2, 1]
aMatrix[1, ]
aMatrix[, 1]
aMatrix[c(2,3), c(1,2)]
aMatrix[6]
aMatrix
sessionInfo()
library(CCTpack)
require(CCTpack)
applymodelfun
library()
detach("CCTpack")
detach(CCTpack)
detack(package:CCTpack)
detach(package:CCTpack)
knitr::opts_chunk$set(echo = TRUE)
a1 = c(1, 2, 3)
a2 <- c(1, 2, 3)
c(1, 2, 3) -> a3
a1 == a2
identical(a1, a2)
a2 == a3
identical(a1, a2)
a1[c(3, 1)]
a1[c(3, 1)] <- c(100, 300)
a1
a1[c(3, 1)] <- a3[c(2, 3)]
a1
a1
a3 <- rev(a3)
a3
# mortality data entered as NOBLE, SYNTAX,  EXCEL, PRECOMBAT (leave oout these small trials Boudriot)
# composite endpoint for Noble = sum mortality+Mi+stroke PCI= 54+43+21=118; CABG=50+15+12=77
Mc<-c(23, 50, 48, 89) #event in non-expose (CABG)
Nc<-c(300, 592, 348, 957) #total in non-expose
Me<-c(17, 54, 45, 119) #event in expose (PCI)
Ne<-c(300, 592, 357, 948) #total in expose
Pc<-c(28, 77, 69, 176) #event in non-expose (CABG)
Pe<-c(25, 118, 67, 203) #event in expose (PCI)
Re <- c(52, 165,130,290) #event in expose (PCI) - MACCE includes revasc
Rc <- c(42, 110, 103, 228) #event in non-expose (CABG) - MACCE includes revasc
temp <- data.frame(Mc=Mc,Me=Me,Pc=Pc, Pe=Pe, Rc=Rc, Re=Re, Nc=Nc, Ne=Ne)
temp$Study <- c("PRECOMBAT", "NOBLE", "SYNTAX", "EXCEL")
temp <- temp[c(9,1:8)] # reorder columns
# Excel data
Ex_p_c <- temp[4,4]
Ex_p_e <- temp[4,5]
Ex_n_c <- temp[4,8]
Ex_n_e <- temp[4,9]
paste("Conirming that hot coded data ", (203/948) - (176/957), "is = to data read from file, ", (Ex_p_e/Ex_n_e) - (Ex_p_c/Ex_n_c))
scores <- read.csv("scores.csv")
scores <- read.csv("data/scores.csv")
scores
scores <- read.csv("data/scores.csv")
scores
scores <- read.csv("data/scores.csv", fileEncoding = "Big5")
scores
scores <- read.csv("data/scores.csv", fileEncoding = "Big-5")
scores
scores <- read.csv("data/scores.csv", fileEncoding = "UTF8")
scores
scores <- read.csv("data/scores.csv", fileEncoding = "UTF8")
scores <- read.csv("data/scores.csv", fileEncoding = "UTF8")
scores
scores <- read.csv("data/scores.csv", fileEncoding = "Big-5")
scores <- read.csv("data/scores.csv", fileEncoding = "Big-5")
scores
scores <- read.csv("data/scores.csv", fileEncoding = "Big-5")
scores <- read.csv("data/scores.csv")
scores
scores <- read.csv("data/scores.csv", encoding = "UTF-8")
scores
scores <- read.csv("data/scores.csv", fileEncoding = "UTF-8")
scores
scores <- read.csv("data/scores.csv", encoding = "BIG5")
scores
scores <- read.csv("data/scores.csv", fileEncoding = "BIG5")
scores
temp2 <- read.csv("data1.csv")
temp2
temp2 <- read.csv("data/data1.csv")
temp2
a1 = c(10, 11, 12)
a2 <- c(10, 11, 12)
a4 <- c(10, 20, 30) -> a3
a1
a2
a3
a4
a1 == a2
a2 == a3
a3 == a1
identical(a1, a2)
identical(a1, a3)
a1[2]
a1[2:3]
a1[c(3, 1)]
a1
a1[c(3, 1)] <- c(100, 300)
a1
a1
a3
a1
a1
a3
a1[c(3, 1)] <- a3[c(2, 3)]
a1
a1 = c(10, 11, 12)
a2 <- c(10, 11, 12)
a4 <- c(10, 20, 30) -> a3
a1
a3
a1[c(3, 1)] <- c(100, 300)
a1
a1
a3
a1[c(3, 1)] <- a3[c(2, 3)]
a1
aVectore <- c(a = 1, b = 2, c = 3)
aVector <- c(a = 1, b = 2, c = 3)
aVector
aVector["a"]
aVector[["a"]]
aVector["a"]
aVector[["a"]]
names(aVector)
names(aVector) <- c("q", "w", "e")
aVector
aVector$a
aVector >= 2
largerThanTwo <- aVector >= 2
largerThanTwo
aVector(largerThanTwo)
aVector[largerThanTwo]
largerThanTwo
aVector(c(2, 3))
aVector[c(2, 3)]
aVectro[c(F, T, T)]
aVector[c(F, T, T)]
a3
rev(a3)
a3
a3 <- rev(a3)
a3
iris
iris
mtcars
help(mtcars)
data()
data(package = "CCTpack")
data(package = "CCTpack")
library(abd)
require(abd)
library(tidyverse)
# install.packages("")
# indtall.packages(c("", ""))
library(knitr)
#library(coda)
#library(rjags)
library(kableExtra)
#library(ggplot2)
library(ggthemes)
library(metafor)
library(meta)
library(tidyverse)
# require(tidyverse)
# mortality data entered as NOBLE, SYNTAX,  EXCEL, PRECOMBAT (leave oout these small trials Boudriot)
# composite endpoint for Noble = sum mortality+Mi+stroke PCI= 54+43+21=118; CABG=50+15+12=77
Mc<-c(23, 50, 48, 89) #event in non-expose (CABG)
Nc<-c(300, 592, 348, 957) #total in non-expose
Me<-c(17, 54, 45, 119) #event in expose (PCI)
Ne<-c(300, 592, 357, 948) #total in expose
Pc<-c(28, 77, 69, 176) #event in non-expose (CABG)
Pe<-c(25, 118, 67, 203) #event in expose (PCI)
Re <- c(52, 165,130,290) #event in expose (PCI) - MACCE includes revasc
Rc <- c(42, 110, 103, 228) #event in non-expose (CABG) - MACCE includes revasc
temp <- data.frame(Mc=Mc,Me=Me,Pc=Pc, Pe=Pe, Rc=Rc, Re=Re, Nc=Nc, Ne=Ne)
temp$Study <- c("PRECOMBAT", "NOBLE", "SYNTAX", "EXCEL")
temp <- temp[c(9,1:8)] # reorder columns
temp <- data.frame(Mc=Mc,Me=Me,Pc=Pc, Pe=Pe, Rc=Rc, Re=Re, Nc=Nc, Ne=Ne)
temp
temp$Study <- c("PRECOMBAT", "NOBLE", "SYNTAX", "EXCEL")
temp
t1 <- temp[, 9]
t1
t1 <- temp[9]
t1
t1 <- temp[,9]
t1
temp[3]
temp[, 3]
temp
temp[, 3]
temp[3]
temp["Pc"]
temp$Pc
temp[[, 3]]
temp[, 3]]
temp[,3]
# mortality data entered as NOBLE, SYNTAX,  EXCEL, PRECOMBAT (leave oout these small trials Boudriot)
# composite endpoint for Noble = sum mortality+Mi+stroke PCI= 54+43+21=118; CABG=50+15+12=77
Mc<-c(23, 50, 48, 89) #event in non-expose (CABG)
Nc<-c(300, 592, 348, 957) #total in non-expose
Me<-c(17, 54, 45, 119) #event in expose (PCI)
Ne<-c(300, 592, 357, 948) #total in expose
Pc<-c(28, 77, 69, 176) #event in non-expose (CABG)
Pe<-c(25, 118, 67, 203) #event in expose (PCI)
Re <- c(52, 165,130,290) #event in expose (PCI) - MACCE includes revasc
Rc <- c(42, 110, 103, 228) #event in non-expose (CABG) - MACCE includes revasc
temp <- data.frame(Mc=Mc,Me=Me,Pc=Pc, Pe=Pe, Rc=Rc, Re=Re, Nc=Nc, Ne=Ne)
temp
tem2 <- data.frame(Mc = c(23, 50, 48, 89),
Nc = c(300, 592, 348, 957))
temp
temp[, 3]
temp$Pc
temp[3]
temp["Pc"]
temp$Pc <- temp$Pc * 2
temp$Study <- c("PRECOMBAT", "NOBLE", "SYNTAX", "EXCEL")
temp
t1 <- temp[,9]
t1
temp <- temp[c(9,1:8)] # reorder columns
temp
temp
temp
temp[, 3]
temp$Pc
t1 <- temp[9]
t1
t2 <- temp[1:8]
temp2 <- colbind(t1, t2)
temp2
temp2 <- colbind(t1, t2)
temp2 <- col.bind(t1, t2)
temp2 <- cbind(t1, t2)
temp2
temp
temp3 <- rbind(temp, temp)
temp3
write.csv(temp, file = "figure/data1.csv")
# wroking dir
getwd()
temp2 <- read.csv("data1.csv")
temp2 <- read.csv("C:/Users/Nick Lin/Desktop/Brophy_2020/data/data1.csv")
temp2
paste("a", "b")
paste0("a", "b")
paste("a", "b")
paste("a", "b", sep = "/")
paste("Conirming that hot coded data ", (203/948) - (176/957), "is = to data read from file, ", (Ex_p_e/Ex_n_e) - (Ex_p_c/Ex_n_c))
dnorm(-1, mean = 0, sd = 1)
pnorm(-1, mean = 0, sd = 1)
qnorm(0.1586553, mean = 0, sd = 1)
qnorm(pnorm(-1))
rnomr(100)
rnorm(100)
#Prior is beta(1,1)
# sampling 100,000 random variables from posterior
post_Ex_p_c <- rbeta(100000, Ex_p_c + 1, Ex_n_c - Ex_p_c + 1 )
pnorm(-1, lower.tail = FALSE)
pnorm(-1)
hist(rnorm(1000))
pnrom(-1, mean = 0, sd = 1)
pnorm(-1, mean = 0, sd = 1)
qnorm(-1, mean = 0, sd = 1)
pnorm(-1, mean = 0, sd = 1)
# 高中統機常說的一個標準差內、兩個標準差內、三個標準差內
pnorm(c(-3, -2, -1, 1, 2, 3))
# 高中統機常說的一個標準差內、兩個標準差內、三個標準差內
prob_1sd <- pnorm(1) - pnorm(-1); prob_1sd
prob_2sd <- pnorm(2) - pnorm(-2); prob_2sd
prob_3sd <- pnorm(3) - pnorm(-3); prob_3sd
temp
temp[, 1]
temp[1, ]
temp[1]
temp[1, ]
temp[1]
temp["Study"]
temp$Study
temp[["Study"]]
temp[[1]]
temp["Study"]
temp[1]
temp[, 1] # Notice!!
temp[, 1, drop = FALSE]
library(DT)
datatable(iris)
temp[, c(1, 3)]
